Notations that deals with the time and the space complexitites to provide proper understanding rather than going and checking the exact numbers in terms of time and space

ASYMPTOTIC ANALYTICS OF AN ALGORITHMS
- Its helps in evaluating perfromace of an algorithm in terms of input size and its increase.
- Using the asymptotic analysis we do not measure the actual running time of the algorithm
- It helps in determining how time and space by the algorithm increases with the input size. 

 ASYMPTOTIC NOTATIONS 

 - Asymptotics notation are the mathematical tools used to calculate the running time of an algorithm in terms of input size.

 Example: performance of car in 1 liter of petrol 

 in differnt situation the perfromace matrix and the output will chnage 
 such as 
 on highway - 25km/liter
 city- 15 km/ liter
 highway+city - 20 km/liter


Similary asymptotic notations give us differnt scenario in which an algorithm perfrom 
- Best case
- Average case
- Worst case


The three notations perfroming runtim analysis of an algorithm
- omega notation 
- big O notation
- Theta notation  


OMEGA NOTATION
-It is the formal way to express the lower bound of an algorithm's running time.
-Lower bound means for any given input this notation deterines the best amount of time an algorithm can take to complete the task. 

-provide the lower time range a algorithm takes to work 
- least used notation as we are looking for the worst case and reduce that 

BIG O NOTATION

It is the formal way to express the upper bound of an algorithm's running time 
- Upper bound means for any given input this notation detremines longest amount of time an algorithm can take to complete 
-the highest time range limit that an algorithm takes 
-a developer always look at 

THETA NOTATION 
It express the formal way to express both th upper and the lower bound of an algorithm's running time. 
By lower and upper bound means for any given input this notation determines the average amount of time a algorithm needs to complete a task 


ANALYSIS OF TIME COMPLEXITY
- rules and asumption while computing the big O notation

understand it with a simple example 
assume a single processsor 
it perfroms sequential execution statement 
assignemnt operation takes one unit of time and return the statement takes one unit of time
arthimitical operation takes one unit of time and the logical operation will take one unit of time.
this will give us a quadratic equation

    T= n^2 +3n +1 ==> O(n^2)       --- here we droped th lowere order terms along with the we also droped the multiplers  get the highest power value and get the time complexity 

Calculating the time complexity of a constant algorithm

simple algorithm

public int sum(int x, int y){           ---line 1
    int result= x+y;                    ---line 2
    return result;                      ---line 3
}                                       ---line 4

as here in line 2 we are perfroming the 4 differnt operations 
1st assigning the x value
2nd assigning the y value
3rd adding them 
4th storing the result  the result variable 


in line 3 we are performing the two operation 
that are just using the return function to assess the result variable and then providing the result

so the time will be 
T= 1+1+1+1+1+1 = 6 (which is a constant)

another example
public int get(int[] arr, int i){
    return arra
}