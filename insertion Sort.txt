INSERTION SORT

Insertion sort is a simple sorting algorithm that works similar to 
the way you sort playing cards in your hands. The array is virtually 
split into a sorted and an unsorted part. Values from the unsorted part 
are picked and placed at the correct position in the sorted part.

To sort an array of size N in ascending order iterate over the array
and compare the current element (key) to its predecessor, if the key
element is smaller than its predecessor, compare it to the elements 
before. Move the greater elements one position up to make space for 
the swapped element.

working 

firstunsortedindex=1- this is the first index of the unsorted partition
i=0-index used to traverse the sorted partition from right to left
newElement = element at index 1 - the vlue we want to insert into the 
sorted partition- array[firstunsortedindex]


lets take an unsorted array

[-12 , 34 , 67 , 3 , -1 , 5 , 100 , 98]

Here the array start with the left side from index 0
it will check for index 1 and compare if element is index 0 element is smaller 
than the index 1 element 1 then no change otherwise it will swap with index 1 value 
here in example it remains same as the -12 is smaller than 34 
now next the pointer goes to compare the element at index 1 and at index 2

[-12 , 34, 67, 3, -1, 5, 100, 98]

on comapring the index values at 1 and 2 index 1 is smaller than index 2 value
so no change 
 now index 2 and index 3 values will be compared

 [-12 , 34, 67, 3, -1, 5, 100, 98]

 here index 3 value is smaller than index 2 value so index 3 value will be kept at 
 some imaginary memory and from the right side sorted array it will get comapre and 
 the swapping take place first the 67 will comes at index 3 and then it will get comapred with 
 index 1 where again 34 is greater so it will ve to index 2 and then comaprision will done 
 between the 0 index and that at imaginary index here -12 is smaller so it will get its
 best palce that is at index 1
 the updated array will be like
 [-12, 3, 34, 67, -1, 5, 100, 98 ]
