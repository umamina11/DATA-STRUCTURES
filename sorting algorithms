Sorting refers to ordering data in an increasing or decreasing fashion according to some linear relationship among 
the data items.
Sorting can be done on names, numbers and records. Sorting reduces 
the For example, it is relatively easy to look up the phone number of a 
friend from a telephone dictionary because the names in the phone book have been sorted into alphabetical order.

Some sort algorithms sort specific type of data structures.
A single algorithm has multiple implementations.

**Bubble Sort:**

Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in the wrong order. This algorithm is not suitable for large data sets as its average and worst-case time complexity is quite high.

In Bubble Sort algorithm, 
traverse from left and compare adjacent elements and the higher one is placed at right side. 
In this way, the largest element is moved to the rightmost end at first. 
This process is then continued to find the second largest and place it and so on until the data is sorted.

when an sorting algortihm works it does make the partion of the whole array one is sorted and other is unsorted set 



Complexity Analysis of Bubble Sort:
Time Complexity: O(N^2)
Auxiliary Space: O(1)

Advantages of Bubble Sort:
Bubble sort is easy to understand and implement.
It does not require any additional memory space.
It is a stable sorting algorithm, meaning that elements with the same key value maintain their relative order in the sorted output.
Disadvantages of Bubble Sort:
Bubble sort has a time complexity of O(N2) which makes it very slow for large data sets.
Bubble sort is a comparison-based sorting algorithm, which means that it requires a comparison operator to determine the relative order of elements in the input data set. It can limit the efficiency of the algorithm in certain cases.

the sorting of the array either starts with the index 0 or maximum index the array holds.
By default and mostly the sorting starts with index 0.
as sorting start the element at the index 0 and at index 1 are compared and then placed accordingly. and then then elemnts at index 1 and index 2 if swaping required then swap, similary all the index will increment perfroming the swapping required. this is one cycle in sorting. 

similary the cyle goes on untill the whole array get sorted  for instance
 array a[]= [12, 4, 6, 10, 50, 22, 1]

 first cycle 
 comparing index 0 and 1
    [4, 12, 6, 10, 50, 22, 1]
 comapring index 1 and 2
    [4, 6, 12, 10, 50, 22, 1]
 comapring index 2 and 3
    [4, 6, 10, 12, 50, 22, 1]
 comparing index 3 and 4
    [4, 6, 10, 12, 50, 22, 1]
 comparing index 4 and 5
    [4, 6, 10, 12, 22, 50, 1]
 comparing index 5 and 6
    [4, 6, 10, 12, 22, 1, 55]

 here we get the maximum number at the end of the array at last index

 one iteration or cycle complete now the second cycle 
cycle 2
  [4, 6, 10, 12, 22, 1, 55]

comapring index 0 and 1
    [4, 6, 10, 12, 22, 1, 55]
comapring index 1 and 2
    [4, 6, 10, 12, 22, 1, 55]
comapring index 2 and 3
    [4, 6, 10, 12, 22, 1, 55]
comparing index 3 and 4 
    [4, 6, 10, 12, 22, 1, 55]
comparing index 4 and 5
    [4, 6, 10, 12, 1, 22, 55]
comapring index 5 and 6
    [4, 6, 10, 12, 1, 22, 55]

 another cycle complete where we get the two largest number at the end of the cycle 

cycel 3
 for the array  [4, 6, 10, 12, 1, 22, 55]
comparing index 0 and 1
  [4, 6, 10, 12, 1, 22, 55]
comparing index 1 and 2
 [4, 6, 10, 12, 1, 22, 55]
comparing index 2 and 3
 [4, 6, 10, 12, 1, 22, 55]
comparing index 3 and 4
 [4, 6, 10, 1, 12, 22, 55]
comparing index 4 and 5
 [4, 6, 10, 1, 12, 22, 55]
comparing index 5 and 6
  [4, 6, 10, 1, 12, 22, 55]

 here we can see that the array has taken a good sorted shape now few more iteration to make the comaprsion and make the final placements
   
cycle  4

 [4, 6, 10, 1, 12, 22, 55]
comparing index 0 and 1
  [4, 6, 10, 1, 12, 22, 55]
comapring index 1 and 2
   [4, 6, 10, 1, 12, 22, 55]
comparing index 2 and 3 
    [4, 6, 1, 10, 12, 22, 55] 
comparing index 3 and 4
    [4, 6, 1, 10, 12, 22, 55] 
comparing index 4 and 5
   [4, 6, 1, 10, 12, 22, 55] 
comaring index 5 and 6
   [4, 6, 1, 10, 12, 22, 55] 

cycle 5

   [4, 6, 1, 10, 12, 22, 55] 
comparing index 0 and 1
   [4, 6, 1, 10, 12, 22, 55] 
comparing index 1 and 2
   [4, 1, 6, 10, 12, 22, 55] 
comparing index 2 and 3
  [4, 1, 6, 10, 12, 22, 55] 
comparing index 3 and 4
  [4, 1, 6, 10, 12, 22, 55] 
comapring index 4 and 5
  [4, 1, 6, 10, 12, 22, 55] 
comparing index 5 and 6
  [4, 1, 6, 10, 12, 22, 55] 

cycle 6 
  [4, 1, 6, 10, 12, 22, 55] 
comparing index 0 and 1
  [1, 4, 6, 10, 12, 22, 55] 

  " Here our array is sorted still the loop will go till end comapring the elements" 
    [1, 4, 6, 10, 12, 22, 55] 

comparing index 1 and 2
    [1, 4, 6, 10, 12, 22, 55] 
comparing index 2 and 3
    [1, 4, 6, 10, 12, 22, 55] 
comparing index 3 and 4
    [1, 4, 6, 10, 12, 22, 55] 
comparing index 4 and 5
    [1, 4, 6, 10, 12, 22, 55] 
comparing index 5 and 6 
    [1, 4, 6, 10, 12, 22, 55] 
    

    This is the complete sorted array 
    "    [1, 4, 6, 10, 12, 22, 55]  "
    we got this array after running the cycle 6 times.
    

    
