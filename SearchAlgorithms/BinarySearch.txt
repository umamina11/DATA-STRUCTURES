Binary search algorithm 
Binary Search is defined as a searching algorithm used in a sorted array by 
repeatedly dividing the search interval in half. The idea of binary search is 
to use the information that the array is sorted and reduce the time complexity 
to O(log N). 
- Data must be stored 
- Chooses the element in the middel of the array and compares it against the 
  search value
- if the element is equal to the value, we are done
- if element is greater than the value, search the left half of the array
- if the element is less than the value, search the right half of the array 

Complexity Analysis of Binary Search:
Time Complexity: 
Best Case: O(1)
Average Case: O(log N)
Worst Case: O(log N)
Auxiliary Space: O(1), If the recursive call stack is considered then the auxiliary space will be O(logN).
Advantages of Binary Search:
Binary search is faster than linear search, especially for large arrays.
More efficient than other searching algorithms with a similar time complexity, such as interpolation search or exponential
search.
Binary search is well-suited for searching large datasets that are stored in external memory, such as on a hard drive or 
in the cloud.
Drawbacks of Binary Search:
The array should be sorted.
Binary search requires that the data structure being searched be stored in contiguous memory locations. 
Binary search requires that the elements of the array be comparable, meaning that they must be able to be ordered.
Applications of Binary Search:
Binary search can be used as a building block for more complex algorithms used in machine learning, such as algorithms for 
training neural networks or finding the optimal hyperparameters for a model.
It can be used for searching in computer graphics such as algorithms for ray tracing or texture mapping.
It can be used for searching a database.

WORKING 
lets takes the sorted array 
-22, -15, 1, 7, 20, 35, 55

seach value: 1
start =0 
end =7
mid point =(start+end)/2= 3
array[3]=7-this is greater than 1, so we will take the left half
of the array 


Now 
start =0; 
end=midpoint=3
midpoint=(start+end)/2=1
array[1]=-15 - this is less than the 1, so we will look at the right half of the given array

Now
start = mid point +1=2
end=3
midpoint =(start+end)/2=2
array[2]=1 - we have found our target element
 

- At some point, there will be only one element in the partition your are checking, but 
  it doesn't have to get to that point 
- can be implemented recursively
- O(logn)- keeps dividing the array into half