MERGE sorting

It is a divide and conquer algorithm becuase it involves splitting the array 
that need to be sorted into bunch of smaller array
Usually implemented using recursion method
It invloves two major phases
- splitting
- merging
splitting phase leads to faster, sorting during the merging phase
perfrom the sorting during merging pahse and prepartaion is done at splitting phase
Splitting is logical, we dont create new arrays

Merge sort is a recursive algorithm that continuously splits the array in
half until it cannot be further divided i.e., the array has only one 
element left (an array with one element is always sorted). Then the sorted
subarrays are merged into one sorted array.


Is is not an in-place algorithm (splitting is inplace but when we merge we take a 
temporary)
time complexity : O(nlogn)-base 2(because of repeated dividion of array in halfs while splitting until we
we get single element sorted arrays)
Its a stable algorithm (when we do merge we check and compare and in that comparison the similar items will 
remain at the similar positon)



SPLITTING PHASE 
start with the unsorted array and divide them into the two parts which are unsorted
the first array is the left array and the second array is the right array 
split the left and right arrays into two arrays each 
and this process of splitting goes on until each array have one element in it.

IF the number of elements are odd in array then it depend on implmenetaion and put elements in left and right
arrays 

The last array after complete sepration we have sorted array by default as it contain one element only.

MERGING PHASE

Merge every left/rught pari of siblings array into sorted array.
after the first merge, we will have to bunch of 2-element aorted arrays
then merge those sorted array (Left/Right Siblings) to end up with a bunch 
of 4 element sorted array
Repeat until we get a single sorted array
Not in-place, use temporary arrays.

Here while merging the arrays got sorted.

WORKING

Let consider the array 
20 , 35 , -15 , 7 , 55 , 1 , -22

start = 0;
end = 7(array.length)
as it is observed that there are 7 elements in the array and the splitting of array 
will take place in the first stage 
so for calculating the mid point
midpoint=(Start+end)/2=3

so the elements 0 to 2 will go into the left array, and elements 3to 6 will go in the right array

so we will deal with the left array for first

20 , 35 , -15

here in the 
start = 0
end = 3

mid point = (start+end)/2 = 1
element 0 to 0 will go into the left array, elements 1 to 2 will go into the
 right array

 in this array we split 20 which cant be further splited so now move to the element 1 and 2
20 is the individual splitted and sorted array so the next array that need to be kept in mind 
is of element 1 and 2 

start =  1 
end = 3
 mid point = (1+3)/2 = 2
 element 1 to 1 will go into the left array and elements 2 to 2 will go into the right array 

 here after performing the split we got two single element sorted array 
 The whole left array got splited into the one element arrays
 that are :
 20
 35
 -15

 (35, -15 ) are the sibling arrays and these will get the first merging in the left array 

 now the right array is taken under consideration for the further splitting
elements are as such 
7 , 55 , 1 , -22

start = 3
end = 7
midpoint= (start+end)/2

element 3 to 4 will go into the left array, and elements 5 to 6 will go into 
the right array
now work on left array 
start =5 and end =7 
mid point = (start+end)/2= 6

element 5 to 5 will go into the lfet array, and element 6 to 6 will go into the 
right array

now the right array is completly splitted and we get the single element sorted array
and then the merging will take place 
while merrging the sorting is going there 
so we will get the 
35 and -15 are in sibling in the left/right arrays
7 and 55 are in sibling  in the left/right array
1 and -22 are in sibling in the left/right arraysevery left/right array is sorted 

c:\Users\umami\OneDrive\Pictures\Screenshots\Screenshot (436).png

MERGING stage

now we have to merge all these 1 element arrays
we have merge siblings left/right arrayseach merge arrays will be sorted 
20 doesn't have  a sibling, so it will not get merge in the first step 
we merge siblings left and right arrays
 we created temporary array large enough to hold all the elements in the arrays we are merging 
 we set i to the first index of the left array, and j to the first index of the right array
 we compare left[i] to right[j].if the left is smaller we copy it to the temp array and increment i by 1
 if the right is smaller, then we copy it to the temp and increment j by 1
we will repeat this process until all elements in the two arrays have been processed
at this point the temporary array contains the merged values in sorted order
we then copy this temporary array back to the original input array at the correct positions
if the left array is at the position x and y , and the right array is at the positions y+1 to z, then after the copy positions x
and z will be stored in the original array


20, 35, -15, 7, 55, 1, -22
this is our array with all elemnts as spereate 
so the merging will start by merging the two siblings on the left (35 and -15)
here we will create a temporary 2-element array
i will be initialize to 1, and j to 2
then compare array[i] to array[j]. -15 is smaller than 25, so we copy it 
to the temp array.
then we copy 35 to the temp array
at this point, the temporary array is {-15, 35}
we now copy this temporary array back into the porition 1 and 2 in the original array
the two sibling arrays have now been merged 
we gone from 3 arrays onto the left to two, and bothe arrays are sorted
not the {20} array has a sibling {-15,35} so we  merge them 
we create a temporaryarray of length 3
i will be initializeto 0 and j to1 
we will compare array[i] and array[j]. -15 is smaller than 20 so its copied to the tmeporary array and j is incremented by 1

as now when we compare 20 is smaller than 35, so it will be copied next, only 35 remains
so it's copied last
the temporary array is{-15, 20, 35}

we copy the temporary array back to position 0 to 2 in the original array
 so at this point we have completed merging the left array and we got this updated array

-15, 20, 35, 7, 55, 1, -22 

now we will repeat the same process with the right array
we have two sets of siblings 7 and 55 and, 1 and -22

we started merging 7 and 55, so we will create a temporary array of length 2

and here the i will be initialized to 3 and j to 4 
where we on comaprision found that 7 is smaller than 55 so it will be copied to the temp array first 
and  then the temp array will be {7, 55}

we copy the temp array back to positions 3 and 4 in the original array
now we have a left array consisting of 7 and 55
as we repeat the process with 1 and -22
where the tmeporary arry will be {-22,1}
we will copy it back into position 5 and 6 
as it is visible that we have two different sorted array are at the right that 
needs to be merged to get the final right array 
so we eill vreate a temporary array of length 4
i will be initialized to 3, and j to 5
-22 is less than 7 so, -22 will be copied to temp and j will increment to 6
1 is less than 7, so 1 will be copied to the temp array, and j will be incremented to 7

only the element in the left array are left and we know that they are 
sorted so we just copy them in order into the temp arraytemp array is 
{-22, 1, 7, 55}
we copy it into the original array at position 3 to 6
all the remainig now is to merge the final left and right arrays
we will create a tmeporay array for 7 elements
updated array will be
-15, 20, 35, -22, 1, 7, 55
i is initialize to 0 and j is initializeto 3 
-22 is less than -15 so we copy to the temporary array and increment 
j to 4 {-22}

-15 is less than 1 so we copy -15 to the temporary array and increment i to 1
{-22 ,-15}

1 is less than 20 so we copy 1 to the temporary array and increemnt j to 5{-22,-15, 1}
7 is less than 20 so we copy 7 to the temporary array and increment j to 6{-22,-15,1,7}
20 is less than 55 so we copy 20 to the temporary array and increment i to 2{-22,-15,1,7,20}
35 is less than 55 so we copy 35 to the temporary array and increment i to 3{-22, -15, 1, 7, 20, 35}
now only 55 is left, we copy it to temporary array, we now copy the temporary array back into the position
0 to 6 of the original array

now if we look at the array its sorted 
-22, -15, 1, 7, 20, 35, 55
