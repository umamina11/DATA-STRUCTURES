A collection designed for holding elements prior to processing.
Besides basic Collection operations, queues provide additional insertion,
extraction, and inspection operations. Each of these methods exists in two 
forms: one throws an exception if the operation fails, the other returns a special
value (either null or false, depending on the operation). The latter form of the 
in insert operation is designed specifically for use with capacity-restricted
Queue implementations; in most implementations, insert operations cannot fail.

Queues typically, but do not necessarily, order elements in a FIFO
(first-in-first-out) manner. Among the exceptions are priority queues, which 
order elements according to a supplied comparator, or the elements' natural 
ordering, and LIFO queues (or stacks) which order the elements LIFO 
(last-in-first-out). Whatever the ordering used, the head of the queue is that 
element which would be removed by a call to remove() or poll(). In a FIFO queue, 
all new elements are inserted at the tail of the queue. Other kinds of queues may 
use different placement rules. Every Queue implementation must specify its ordering 
properties.

The offer method inserts an element if possible, otherwise returning false. 
This differs from the Collection.add method, which can fail to add an element 
only by throwing an unchecked exception. The offer method is designed for use when 
failure is a normal, rather than exceptional occurrence, for example, in 
fixed-capacity (or "bounded") queues.

The remove() and poll() methods remove and return the head of the queue. 
Exactly which element is removed from the queue is a function of the queue's 
ordering policy, which differs from implementation to implementation. The remove()
and poll() methods differ only in their behavior when the queue is empty: the 
remove() method throws an exception, while the poll() method returns null.

The element() and peek() methods return, but do not remove, the head of the queue.


METHODS
- add
- element
- peek
- poll
- remove