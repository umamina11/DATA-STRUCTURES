STABLE COUNTING SORT 

Counting sort is a linear non-comparison-based sorting algorithm that 
works great for a specific range of values. It counts the number of 
occurrences of each distinct element in an array and uses that information 
to determine the sorted order. The count is stored in an auxiliary array 
and the sorting is done by mapping the count as an index of the auxiliary 
array.

- required extra steps need to done to make the radix sort stable using the counting sort 

- can calculate where values should be written back to the original array 

- writing the values into the array in backwards order esnures stability 

in the radix sort we worked on the array 
1330, 8792, 1594, 4725, 4586, 5729

we will sort this array based on the 10's position- must be a stable sort

1594 must remains after 8792
5729 must remian after 4725

we do the counting as we didi before and we will end up counting array below
0,0,2,1,0,0,0,0,1,2

we are oging to create a temporay array that matches the length of the array we are sorting 
here we will have 6 length 

we can use the counts to figure out which range of indices in the temporary array 
will be occupied by each value. for example we can figure out the two values with '2'
in the 10s position will occupy indices 0 and 1 in the temporary 
array. the value wiht '3' in the 10's positon will occupy the index 2
the value at the 8 in the 10's positon will occupy index 3. the values with 9 in the 10's position will 
occupy indices 4 and 5
 

 after the first pass, we adjust the counts, instead of the number of values that have a specific 10's value
 we want to store how many values have a specific 10's value or less
 for example we want to store the 3 at index 3, becuase 3 values have a 10's value of 3 or less
 we can calculate each adjusted count by adding up the counts up to and including the 10's value


 1330, 8792, 1594, 4725, 4586, 5729
 0, 0, 2, 3, 3, 3, 3, 3, 4, 6

we can use the adjusted counts to wrtie out the values in the correct order and preerve the realtive positioing of values that
have duplicate 10's values

here is the code snippet :
int [] tmp=new int[n]
for (int k=n-1;k>=0;k--){
    tmp[--countarry[getDigit(position,input[k],radix)]]= input[k];
    
}

n= length of the inpur array=6
k starts at 5 and goes to 0

when k=5:
- countarray[getFigit(..)]=countarray[2] for 5729
(the value at input [k])=2

we are using the perfix operator, so we subtract one from countarray[2]=1
we then assign input[k] (5729) to tmp[1]

the result will be like 
0, 5729, 0, 0, 0, 0                 : temp array 

0,0,1,3,3,3,3,3,4,6                 : count array 

temp array now has the value 5729
count arr[2] ha been decremented by 1, since we have written out 
one value wiht 2 in the 10's position

now k = 4:
- countarr[getdigit(...)]=countarray[8] for 4586
(the value at the input[k])= 4
we are using the prefix operator, so we subtract one from count array[8]=3
we then assign input[k](4586)to tmp[3]

this will give us the result like
0, 5729, 0, 4586, 0, ,0

0,0,1,3,3,3,3,3,3,6

temp array now has 4586
countarray [8] has been decremented by 1, since we have written out one value 
in the 10's position


now in the loop again 
when k=3:
- countarray[getDigit(..)]= countarray[2]for 4725
(the value at input[k])=1
- we are using the prefix operator, so we subtract one from countarray[2]=0
- we then assign input[k](4725) to tmp[0]

it will the results as follows
4725, 5729, 0, 4586, 0, 0

0,0,0,3,3,3,3,3,3,6

temp array now has 4725
countarray[2] has been decremented by 1, since we have written out one value with 2, 
in the 10's position 

notice that the relative postions of 4725 and 5729 has been preserved

now again the loop will work and it will 

when k=2:
- countarray[getdigit(..)]=count array[9]for 1594
(the value at input[k])=6
- we are using the prefix operator, so we subtract one from countarray[9]=5
- we assign input[k](1594) to tmp[5]
 and this will update the array 

 4725, 5729, 0, 4586, 0, 1594 

 0,0,0,3,3,3,3,3,3,5

 temp array now has the value 1594
 countarray[9] has been decremented by 1, since we have written out one value with 9 
 in the 10's position

 now again the loop will start
  when k=1:

  - countarray[getdigit(..)]=countarray[9] for 8792(the value at input[k])=5
  - we are using the prefix operator, so we subtract ine from countarray[9]=4
  - we then assign the input[k](8792) to tmp[4]

  the array we get is 
  4725, 5729, 0, 4586, 8792, 1594

  0,0,0,3,3,3,3,3,3,4

  temp array now has the value 8792
  countarray[9] has been decremented by 1, since 
  we have written out one value with 9 in the 10's positionnotice that the realtive
  position of 8792 and 1594 have been preserved


  and again the loop will run and the finally the value of k will be 0

  when k = 0:
  -countarray[getdigit(..)]=countarray[3] for 1330
  (the value at input[k])=3
  - we are using the prefix operator, so we subtract one from countarray[3]=2
  - we then assign input[k](1330) to tmp[2]

  the updated array will be 
  4725, 5729, 1330, 4586, 8792, 1594

  0,0,0,2,3,3,3,3,3,4

  temp arry now has 1330
  countarray[3] has been decreemented by 1, since we have written out one value wiht in the 10's position
  now we would copy the temporary array into the input array


So this the stable counting sort
- this works becuase we traverse the input array from right to left, and we write duplicate values into the 
temp array from right to left
- if we know that duplicate values will go into the positons 3 and 4, we write the 
rightmost value in the input array into position 4, and the leftmost value into the position 3

-this preserve the relative positioing of duplicate the values
by adjusting the counting array after the initial pass, we can map values to indices in the temp aarray
-can also use lined lists ot make counting sort stable 




 



